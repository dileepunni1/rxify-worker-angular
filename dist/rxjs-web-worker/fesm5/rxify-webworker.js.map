{"version":3,"file":"rxify-webworker.js","sources":["ng://rxify-webworker/lib/rxify-worker.ts","ng://rxify-webworker/lib/register-worker.ts","ng://rxify-webworker/lib/dto.ts"],"sourcesContent":["import { Subject } from 'rxjs';\nimport { WorkerMessage } from './dto';\n\n\n/**\n * To Rxify a worker thread and make the web worker enjoyable.\n * Returns an observable for each message sent to worker.  The Oservable is automatically completed\n * if the thread completes the observable.\n * Multiple messages can be sent which with their own unique observable.\n *\n * ```ts\n * const rxify = new RxifyWorker(new Worker('...'));\n * rxify.sendMessage('hello').subscribe(msg => console.log(msg));\n * ```\n *\n */\nexport class RxifyWorker {\n  private callbackStack: { [key: string]: Subject<any> } = {};\n  private messageIndex = 0;\n\n  constructor(private worker: Worker) {\n\n    worker.addEventListener('message', (e: MessageEvent) => {\n      this.handleMessageEvent(e);\n    });\n\n  }\n\n  sendMessage(payload: any) {\n    const messageId = String(this.messageIndex++);\n    const messgageToSend: WorkerMessage = { __messageId: messageId, userData: payload };\n\n    const subject = new Subject();\n    this.callbackStack[messageId] = subject;\n\n    this.worker.postMessage(messgageToSend);\n\n    return subject.asObservable();\n  }\n\n\n  private handleMessageEvent(event: MessageEvent) {\n    const workerMessage: WorkerMessage = event.data;\n    const callback = this.callbackStack[workerMessage.__messageId];\n    // if no call back found, it might be a message from wrong window.\n    if (callback) {\n      if (workerMessage.__messageType === 'COMPLETE') {\n        callback.complete();\n      } else {\n        callback.next(workerMessage.userData);\n      }\n    }\n  }\n\n}\n\n","import { Observable } from 'rxjs';\nimport { WorkerMessage } from './dto';\n\nexport type MessageHandler = (payload: any) => Observable<any>;\n\n\n/**\n * To be used in the webworker to receive the messages and return the responses.\n * Wraps the functionality of postMessaging to hide the complexity of dealing with web workers.\n * A handler which accepts the message and returns the Observable should be registered.\n * ```ts\n * const r = new RegisterWorker();\n * r.register((msg)=>{\n *  const s = new Subject();\n *  setTimeout(()=> {\n *    s.next('Hello World!');\n *    s.complete();\n *  })\n *  return s.asObservable();\n * });\n * ```\n */\nexport class RegisterWorker {\n  private handler: MessageHandler;\n\n  constructor() {\n    this.handleIncomingMessages();\n  }\n\n  /**\n   * Registers message handler\n   * @param handler MessageHandler\n   */\n  handleMessages(handler: MessageHandler) {\n    this.handler = handler;\n  }\n\n  /**\n   * handles incoming message and sends response back\n   */\n  private handleIncomingMessages() {\n    self.addEventListener('message', (event: MessageEvent) => {\n      const message: WorkerMessage = event.data;\n      const userData = message.userData;\n      if (!this.handler) {\n        return;\n      }\n      const observable: Observable<any> = this.handler.apply(this, [userData]);\n      const subscription = observable.subscribe(\n        // next handler\n        (data) => {\n          const messageToSend: WorkerMessage = { ...message, __messageType: 'DATA', userData: data };\n          // @ts-ignore\n          self.postMessage(messageToSend);\n        },\n        // error handler\n        (err) => {\n          throw new Error(err);\n        },\n        // complete handler\n        () => {\n          const messageToSend: WorkerMessage = { ...message, __messageType: 'COMPLETE' };\n          // @ts-ignore\n          self.postMessage(messageToSend);\n          // subscription.unsubscribe();\n        });\n    });\n\n  }\n\n}\n\n\n","export interface WorkerMessage {\n  __messageId: string;\n  __messageType?: 'DATA' | 'COMPLETE';\n  userData: any;\n}\n"],"names":[],"mappings":";;;;;;;AAAA;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;IAIE,qBAAoB,MAAc;QAAlC,iBAMC;QANmB,WAAM,GAAN,MAAM,CAAQ;QAH1B,kBAAa,GAAoC,EAAE,CAAC;QACpD,iBAAY,GAAG,CAAC,CAAC;QAIvB,MAAM,CAAC,gBAAgB,CAAC,SAAS;;;;QAAE,UAAC,CAAe;YACjD,KAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;SAC5B,EAAC,CAAC;KAEJ;;;;;IAED,iCAAW;;;;IAAX,UAAY,OAAY;;YAChB,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;;YACvC,cAAc,GAAkB,EAAE,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE;;YAE7E,OAAO,GAAG,IAAI,OAAO,EAAE;QAC7B,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;QAExC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QAExC,OAAO,OAAO,CAAC,YAAY,EAAE,CAAC;KAC/B;;;;;;IAGO,wCAAkB;;;;;IAA1B,UAA2B,KAAmB;;YACtC,aAAa,GAAkB,KAAK,CAAC,IAAI;;YACzC,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,WAAW,CAAC;;QAE9D,IAAI,QAAQ,EAAE;YACZ,IAAI,aAAa,CAAC,aAAa,KAAK,UAAU,EAAE;gBAC9C,QAAQ,CAAC,QAAQ,EAAE,CAAC;aACrB;iBAAM;gBACL,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;aACvC;SACF;KACF;IAEH,kBAAC;CAAA,IAAA;;;;;;IArCC,oCAA4D;;;;;IAC5D,mCAAyB;;;;;IAEb,6BAAsB;;;;;;;;;;;;;;;;;;;;;;;ACEpC;;;;;;;;;;;;;;;;;IAGE;QACE,IAAI,CAAC,sBAAsB,EAAE,CAAC;KAC/B;;;;;;;;;;IAMD,uCAAc;;;;;IAAd,UAAe,OAAuB;QACpC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KACxB;;;;;;;;;IAKO,+CAAsB;;;;;IAA9B;QAAA,iBA4BC;QA3BC,IAAI,CAAC,gBAAgB,CAAC,SAAS;;;;QAAE,UAAC,KAAmB;;gBAC7C,OAAO,GAAkB,KAAK,CAAC,IAAI;;gBACnC,QAAQ,GAAG,OAAO,CAAC,QAAQ;YACjC,IAAI,CAAC,KAAI,CAAC,OAAO,EAAE;gBACjB,OAAO;aACR;;gBACK,UAAU,GAAoB,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAI,EAAE,CAAC,QAAQ,CAAC,CAAC;;gBAClE,YAAY,GAAG,UAAU,CAAC,SAAS;;;;;;;YAEvC,UAAC,IAAI;;oBACG,aAAa,gBAAuB,OAAO,IAAE,aAAa,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,GAAE;;gBAE1F,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;aACjC;;;;;;;YAED,UAAC,GAAG;gBACF,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;aACtB;;;;;;YAED;;oBACQ,aAAa,gBAAuB,OAAO,IAAE,aAAa,EAAE,UAAU,GAAE;;gBAE9E,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;;aAEjC,EAAC;SACL,EAAC,CAAC;KAEJ;IAEH,qBAAC;CAAA,IAAA;;;;;;IA/CC,iCAAgC;;;;;;;;;;ACvBlC,4BAIC;;;IAHC,oCAAoB;;IACpB,sCAAoC;;IACpC,iCAAc;;;;;;;;;;;;;;;"}